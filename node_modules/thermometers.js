var sys = require('sys');
var events = require('events');
var fs = require('fs');

var Thermometer = module.exports.Thermometer = function(devicePath) {
    var self = this;
    events.EventEmitter.call(this);
    
    self.emit('tConnect', {device: devicePath});
    
    var read = function() {
        var data = {device: devicePath};
        
        fs.readFile(devicePath + '/w1_slave', 'utf8', function(err, raw){
            if (err) {
                self.emit('tFail', data);
                setTimeout(read, 1000); // If file read failed, try again in a second.
                return;
            }
            
            var matches = raw.match(/(([a-f\d]{2} ){9}): crc=([a-f\d]{2}) (YES|NO)\r?\n([a-f\d]{2} ){9}t=(-?\d+)/);
            if (!matches) {
                // Something went really wrong. Did the thermometer melt?
                throw new Error("Data did not match expected pattern");
            }
            
            data.id = matches[1].trim();
            data.crc = matches[4] == 'YES';
            data.t = parseInt(matches[6])/1000;

            self.emit(data.crc ? 'tData' : 'tFail', data);
            //process.nextTick(read);
            setTimeout(read, 1000)
        });
    };
    
    var failureStreak = 0;
    self.on('tFail', function(){
        if (++failureStreak == 3) {
            // Upon three consecutive failures, assume disconnected.
            self.emit('tDisconnect', {device: devicePath});
        }
    });
    self.on('tData', function(){
        if (failureStreak >= 3) {
            self.emit('tConnect', {device: devicePath});
        }
        failureStreak = 0;
    });
    
    process.nextTick(read);
};
sys.inherits(Thermometer, events.EventEmitter);

var ThermometerLab = module.exports.ThermometerLab = function(busDevicesPath) {
    var self = this;
    events.EventEmitter.call(this);
    
    var discoveredDevices = {};
    self.getDevices = function() {
        return discoveredDevices;
    };
    
    var poll = function() {
        fs.readdir(busDevicesPath, function(err, items){
            if (!err) {
                items.forEach(function(item){
                    if (!/^28-[\da-f]+$/.test(item)) {
                        return;
                    }
                    
                    if (!!discoveredDevices[item])
                        return;
                    
                    var devicePath = busDevicesPath + item;
                    discoveredDevices[item] = new Thermometer(devicePath);
                    self.emit('connect', {device: devicePath});
                });
            }
            
            setTimeout(poll, 3000); // Poll again in a few seconds.
        });
    };
    process.nextTick(poll);
};
sys.inherits(ThermometerLab, events.EventEmitter);